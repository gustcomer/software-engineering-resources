################################################################################
title: The Lost Art of Software Design
author: Simon Brown
conference: YOW! 2019
url: https://www.youtube.com/watch?v=gNj8I4uSTgc
references:
  Simon Brown • Software Architecture for Developers Vol. 2 • https://leanpub.com/visualising-softw...
  David Farley • Modern Software Engineering • https://amzn.to/3GI468M
  Dave Farley & Jez Humble • Continuous Delivery • https://amzn.to/3ocIHwd
  Woods, Erder & Pureur • Continuous Architecture in Practice • https://amzn.to/2QWAmkl
  George Fairbanks • Just Enough Software Architecture • https://amzn.to/3uZzVo0
  Design It!
  Building Evolutionary Architectures - Neal Ford, Rebecca Parsons, Patrick Kua
key takeaways:
  - you should do a bit of design at the start of the project and at the start of each sprint.
  - evolutionary design is the art of doing a bit of design at each iteration.
  - at the end he's gonna present the C4 model. He do consulting and ask people to draw diagrams.
  - has a specification of a Financial Risk System.
  - discusses why people avoid upfront design.
  - UML is too complicated. Use a whiteboard, the value is in the conversations.
  - Discusses what kind of questions you should ask before coding.
  - You should discuss a bit of technology (solution) in your charts.
  - Architecture: programming languages, technologies, platforms, monolith, microservices, hybrid approach.
  - C4: a Software System is made of Containers, which contains one or more component, with code elements each.
  - C4: Context, Containers, Components, Code.
  - Take a look at software architecture checklist at c4model.com
  - UML não favorece conversations: why are some boxes red? what does that arrow mean? is that a java application?
  - C4 favorece conversation: why mongoDB? what protocol the two java applications communicate? why SQL if we always use oracle?
  - note that expliciting the technologies aids the conversation.
  - use Architecture Decision Records: Title, Context, Decision, Status, Consequences.
rate: 9
attention: 8 (stopped at 40:24)
################################################################################
title: Build Abstractions Not Illusions
author: Gregor Hohpe
conference: YOW! 2023
url: https://www.youtube.com/watch?v=aWZFRk-w3ng&t=1286s
references:
  Gregor Hohpe • Platform Strategy • https://leanpub.com/platformstrategy
  Gregor Hohpe & Bobby Woolf • Enterprise Integration Patterns • https://amzn.to/3Zj2mfB
  Gregor Hohpe • The Software Architect Elevator • https://amzn.to/3m3athI
  Hohpe, Danieli, Landreau & Hashmi • Cloud Strategy • https://amzn.to/3KzMr8q
  Vlad Khononov • Balancing Coupling in Software Design • https://amzn.to/3SwU6Gv
  Peter Sbarski • Serverless Architectures on AWS • https://amzn.to/3hJzEUM
key takeaways:
  - you always aim to reduce the cognitive load so that your team is more efficient
  - you can reduce cognitive load by introducing layers of abstraction
  - when you introduce abstractions, you should choose a new vocabulary and abandon vocabulary of the old model.
rate: 8
attention: 7
################################################################################
title: A Philosophy of Software Design
author: John Ousterhout
conference: Talks at Google - 2018
url: https://www.youtube.com/watch?v=bmSAYlu0NcY&t=2609
references:
  A Philosophy of Software Design - John K. Ousterhout - 2018
  David Parnas - Papers On Information Hiding - 70s
key takeaways:
  - Software Decomposition is one of the main inventions.
  - Classes should be deep (Parnas article).
    https://web.archive.org/web/20120223013018/http://www.cs.umd.edu/class/spring2003/cmsc838p/Design/criteria.pdf
  - Tactical vs Strategic Programming.
rate: 8
attention: 7
################################################################################
title: The Rationale for Continuous Delivery
author: Dave Farley
conference: YOW! 2016
url: https://www.youtube.com/watch?v=exBitmWwJG0&t=1860s
references:
  David Farley • Modern Software Engineering • https://amzn.to/3GI468M
  Dave Farley • Continuous Delivery Pipelines • https://amzn.to/3rjetdi
  Dave Farley & Jez Humble • Continuous Delivery • https://amzn.to/3ocIHwd
  Dave Farley & many more • Software Architecture Metrics • https://amzn.to/3M3XqG5
key takeaways:
  - you should treat software with scientific method
  - you can organize you cd pipeline and test small increments in the software in less than an hour.
rate: 8
attention: 6
################################################################################
title: Building Evolutionary Architectures
author: Neal Ford - works at ThoughtWorks - Software Architecture, the Hard Parts
conference: YOW! 2018
url: https://www.youtube.com/watch?v=DloJCWdB7_o&t=1644s
references:
  Ford, Parsons, Kua & Sadalage • Building Evolutionary Architectures 2nd Edition • https://amzn.to/3lqr5Q8
  Ford, Richards, Sadalage & Dehghani • Software Architecture: The Hard Parts • https://amzn.to/3QeMgjR
  Mark Richards & Neal Ford • Fundamentals of Software Architecture • https://amzn.to/3wMBhoI
  Ford, Parsons & Kua • Building Evolutionary Architectures • https://amzn.to/3l0IOh2
  Neal Ford • Functional Thinking • https://amzn.to/3l6ND8M
  Michael Feathers • Working Effectively with Legacy Code • https://amzn.to/3ZFQoMU
  Christian Clausen • Five Lines of Code • https://amzn.to/3s2zjyg
key takeaways:
  - evolutionary is related to genetic algorithms.
  - the key to evolutionary are fitness functions.
rate: 7
attention: 6
################################################################################
title: Design 101 for Programmers
author: James White
conference: YOW! 2016
url: https://www.youtube.com/watch?v=xVUV6L2IxvI&t=563s
references:
  Kevlin Henney • 97 Things Every Programmer Should Know • https://amzn.to/2Yahf9U
  Henney & Monson-Haefel • 97 Things Every Software Architect Should Know • https://amzn.to/3pZuHsQ
  Matthew Skelton & Manuel Pais • Team Topologies • http://amzn.to/3sVLyLQ
  Michael Jackson • Software Requirements and Specifications • https://amzn.to/3ql2T14
  Geoffrey West • Scale • http://amzn.to/3eKMbpc
  Donald G. Reinertsen • The Principles of Product Development Flow • https://amzn.to/3hJ2Ye2
key takeways:
rate: 7
attention: 3