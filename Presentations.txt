################################################################################
title: A Daily Practice of Empirical Software Design
author: Kent Beck
conference: DDD Europe 2023
url: https://www.youtube.com/watch?v=yBEcq23OgB4
references:
  Structured Design - Edward Yourdon, Larry Constantine.
key takeaways:
  - software design exists to help geeks feel safe in the world.
  - software design is an exercise in human relationships.
  - the most fundamental relationship you got to get right is with yourself.
  - if the code is messy, you clean it up. If someone is waiting for a feature, well that's just too bad.
  - if you face an ugly code, should you tidy first?
  - Cost(Software) ≈ Cost(Changes) Cost(Changes) ≈ Cost(Big Changes) Cost(Big Changes) ≈ Coupling
  - Static Analysis of coupling make no sense because you have to know what changes you're making.
  - Coupled(E1,E2,Δ) :: ΔE1 ⇒ ΔE2
  - The coupling of two services can be as sutil as the bandwith of the switch connecting them.
  - your tools have a part to play in whether your components are coupled.
  - power law functions can be useful: plot histogram of how many functions are called x times...
  - Cyclomatic complexity: number of linearly independent paths through a program's source code. Used to indicate the complexity of a program.
  - Coupling follows a power law distribution. If you plot the histogram of how many functions are called x times and apply log scale, a straight line appears. How does this phenomenon occur? That's because formation of coupling is similar to how avalanches and tornadoes occur.
  - What is the Single Responsibility Principle? It's just the stick you use to hit other people with! Well, speaking seriously, it's just an argument...
  - More cohesion is better, right? Yes! And more coupling is bad, right? Yes! But isn't cohesion just another form of coupling? Well...
  - Software design is cyclical, moving from Idea to Behavior implementation, like an Ouroboros. When code gets messy and adding new behaviors becomes hard, take a time to improve the code's Structure make the change easy.
  - For every hard change, make the change easy, then make the easy change.
  - Separate changes in behavior from changes in structure. Separate tests from code. Make it run, then make it right. If you want to scale, be smart and divide your problems into parts.
  - Professional don't try to solve hard problems using hard skills. They first try to divide into smaller problems that can be solved with ordinary levels of skill.
  - Make it work than make it right! First make it work, then you clean code it.
  - First get the relationship with yourself right. Then maintain relationship with other geeks. Then maintain the relationship with business sponsors, etc.
rate: 10
attention: 10
################################################################################
title: Design Matters
author: Rebecca Wirfs-Brock
conference: Domain Driven Design Europe - 2017
url: https://www.youtube.com/watch?v=NZ5mI6-tNUc
references:
  A Pattern Language - Christopher Alexander - Urbanist
  The Nature of Order - Christopher Alexander - things that have life
  Billy Vaughn Koen - Nuclear Engineer - Heuristics
  Discussion of the Method - Billy Vaughn Koen
  Streamlined Object Modeling - Jill Nicola / Mark Mayfield, et al,
  Problem Frames - Michael Jackson
  Delight's Muse - Jenny Quillien
  Software Design Centers - Jim Coplien
key takeaways:
  - design is a cycle, think of an Ouroboros.
  - Heuristic: anything that provides a plausible aid in the solution of a problem. Koen
  - ways to structure a domain layer: transaction script, domain model pattern, table module (fowler), database scripts/stored procedures
  - Best Fit profiles is an interesting table.
  - examples of heuristics: for complex problems use powerful languages
  - example of decision: where to put validations and constaint checking?
  - Design heuristics is a powerful tool! but don't take them to the extremes.
  - pick the best heuristic from what your personal sota (state of the art) at the time. - koen
  - design patterns are packaged heuristics - with Context (when to use it)
  - the RDD Role Stereotypes can provide good heuristics. Knowing, doing, deciding. Information Holder, Structurer, Service Provider, Coordinator, Controller, Interfacer.
  - Jim Coplien takes things that have life and apply it to software design.
  - Alexanders 15 properties of things which have life: Levels of scale, strong centers, boundaries, alternating repetition, positive space, good shape, local symmetries,
  - deep interlock and ambiguity, contrast, gradients, roughness, echoes, the void, simplicity and inner calm, not-separateness.
rate: 10
attention: 9
################################################################################
title: Modular Monoliths
author: Simon Brown
conference: GOTO 2018
url: https://www.youtube.com/watch?v=5OjqD-ow8GE
references:
  https://simonbrown.je/
  https://c4model.com/
  Simon Brown • Software Architecture for Developers Vol. 2
  George Fairbanks • Just Enough Software Architecture • https://amzn.to/3uZzVo0
  Building Evolutionary Architectures - Neal Ford, Rebecca Parsons, Patrick Kua
  Decomposition in computer science (wikipedia)
  On the Criteria to be Used in Decomposing Systems into Modules.
key takeaways:
  - Components usually are conceptual, they don't need to exist. languages usually don't have component keyword
  - model-code gap: stuff that are in the diagrams/model not necessarily have a place in the code.
  - module, component, service, subsystem, layer aren't usually keywords in the languages.
  - package by layer - package by feature - package by components.
  - cargo cult programming: adapt patterns etc without a reasonable logic.
  - the public keyword in java encourages big balls of mud
  - the infrastructure of apps is usually the same thing, web stuff, then domain stuff, then data stuff.
  - present fitness functions for the architecture to avoid complexity, coupling, etc
  - check classical component based design
  - always keep in mind the differences in diagram among horizontalclicing, verticcal slicing, package by component and ports and adapters.
  - architecture-indifferent design - 
  - Functional decomposition is a method of analysis that dissects a complex process in order to examine its individual elements.
  - Volatility-Based Decomposition: method used in software design to structure the architecture of a software system based on the areas that are most likely to change.
  - check old material on good design, high cohesion, low coupling, responsibilities, volatility.
  - go check CRC - Class-Responsibilities-Collaborators
  - Well-defined in-process components is a stepping stone to out-of-process components.
  - beware of the model-code gap
rate: 10
attention: 9
################################################################################
title: Balancing Coupling in Software Design
author: Vlad Khononov
conference: DDD Europe 2023
url: https://www.youtube.com/watch?v=KTy4rqgPOjg&t=1056s
references:
  Balancing Coupling in Software Design - Vlad Khononov
  Composite/Structured Design - Glenford J. Myers
  What Every Programmer Should Know About Object-Oriented Design - Meilir Page-Jones
key takeaways:
  - System design is inherently about boundaries (what's in, what's out, what spans, what moves between), and about tradeoffs. It reshapes what is outside, just as it shapes what is inside. - Ruth Malan
  - There are many useful and revealing heuristics for defining the boundaries of a service. Size is one of the least useful. 
  - Coupling defines the components' degrees of freedom - Michael Nygard
  - Coupling in Structured Design vs Connascence
  - Connascence is a software quality metric invented by Meilir Page-Jones to allow reasoning about the complexity caused by dependency relationships in object-oriented design much like coupling did for structured design.
################################################################################
title: The Lost Art of Software Design
author: Simon Brown
conference: YOW! 2019
url: https://www.youtube.com/watch?v=gNj8I4uSTgc
references:
  Simon Brown • Software Architecture for Developers Vol. 2 • https://leanpub.com/visualising-softw...
  David Farley • Modern Software Engineering • https://amzn.to/3GI468M
  Dave Farley & Jez Humble • Continuous Delivery • https://amzn.to/3ocIHwd
  Woods, Erder & Pureur • Continuous Architecture in Practice • https://amzn.to/2QWAmkl
  George Fairbanks • Just Enough Software Architecture • https://amzn.to/3uZzVo0
  Design It!
  Building Evolutionary Architectures - Neal Ford, Rebecca Parsons, Patrick Kua
  Agile Architecture - Scott Ambler
  Architectural Katas - Ted Neward, Neal Ford
  Ron Jeffries Blog - https://ronjeffries.com/ - It is much more updated than his twitter account.
key takeaways:
  - you should do a bit of design at the start of the project and at the start of each sprint.
  - evolutionary design is the art of doing a bit of design at each iteration.
  - at the end he's gonna present the C4 model. He do consulting and ask people to draw diagrams.
  - has a specification of a Financial Risk System.
  - discusses why people avoid upfront design.
  - UML is too complicated. Use a whiteboard, the value is in the conversations.
  - Discusses what kind of questions you should ask before coding.
  - You should discuss a bit of technology (solution) in your charts.
  - Architecture: programming languages, technologies, platforms, monolith, microservices, hybrid approach.
  - C4: a Software System is made of Containers, which contains one or more component, with code elements each.
  - C4: Context, Containers, Components, Code.
  - Take a look at software architecture checklist at c4model.com
  - UML não favorece conversations: why are some boxes red? what does that arrow mean? is that a java application?
  - UML vs CASE tools
  - C4 favorece conversation: why mongoDB? what protocol the two java applications communicate? why SQL if we always use oracle?
  - note that expliciting the technologies aids the conversation.
  - use Architecture Decision Records: Title, Context, Decision, Status, Consequences.
  - Base your architecture on requirements, travel light and prove your architecture with concrete experiments. - Scott Ambler
  - use Risk Storming (in Simon Brown book)
  - Design techniques: workshops, interviews, event storming, impact mapping, domain modelling, OOAD, CRC, DDD
  - DDD, architecture reviest, ATAM, architecture dry runs, Risk-storming, concrete experiments, C4 model, ADRs, etc
rate: 9
attention: 10
################################################################################
title: Build Abstractions Not Illusions
author: Gregor Hohpe
conference: YOW! 2023
url: https://www.youtube.com/watch?v=aWZFRk-w3ng&t=1286s
references:
  Gregor Hohpe • Platform Strategy • https://leanpub.com/platformstrategy
  Gregor Hohpe & Bobby Woolf • Enterprise Integration Patterns • https://amzn.to/3Zj2mfB
  Gregor Hohpe • The Software Architect Elevator • https://amzn.to/3m3athI
  Hohpe, Danieli, Landreau & Hashmi • Cloud Strategy • https://amzn.to/3KzMr8q
  Vlad Khononov • Balancing Coupling in Software Design • https://amzn.to/3SwU6Gv
  Peter Sbarski • Serverless Architectures on AWS • https://amzn.to/3hJzEUM
key takeaways:
  - you always aim to reduce the cognitive load so that your team is more efficient
  - you can reduce cognitive load by introducing layers of abstraction
  - when you introduce abstractions, you should choose a new vocabulary and abandon vocabulary of the old model.
rate: 8
attention: 7
################################################################################
title: A Philosophy of Software Design
author: John Ousterhout
conference: Talks at Google - 2018
url: https://www.youtube.com/watch?v=bmSAYlu0NcY&t=2609
references:
  A Philosophy of Software Design - John K. Ousterhout - 2018
  David Parnas - Papers On Information Hiding - 70s
key takeaways:
  - Software Decomposition is one of the main inventions.
  - Classes should be deep (Parnas article).
    https://web.archive.org/web/20120223013018/http://www.cs.umd.edu/class/spring2003/cmsc838p/Design/criteria.pdf
  - Tactical vs Strategic Programming.
rate: 8
attention: 7
################################################################################
title: The Rationale for Continuous Delivery
author: Dave Farley
conference: YOW! 2016
url: https://www.youtube.com/watch?v=exBitmWwJG0&t=1860s
references:
  David Farley • Modern Software Engineering • https://amzn.to/3GI468M
  Dave Farley • Continuous Delivery Pipelines • https://amzn.to/3rjetdi
  Dave Farley & Jez Humble • Continuous Delivery • https://amzn.to/3ocIHwd
  Dave Farley & many more • Software Architecture Metrics • https://amzn.to/3M3XqG5
key takeaways:
  - you should treat software with scientific method
  - you can organize you cd pipeline and test small increments in the software in less than an hour.
rate: 8
attention: 6
################################################################################
title: Building Evolutionary Architectures
author: Neal Ford - works at ThoughtWorks - Software Architecture, the Hard Parts
conference: YOW! 2018
url: https://www.youtube.com/watch?v=DloJCWdB7_o&t=1644s
references:
  Ford, Parsons, Kua & Sadalage • Building Evolutionary Architectures 2nd Edition • https://amzn.to/3lqr5Q8
  Ford, Richards, Sadalage & Dehghani • Software Architecture: The Hard Parts • https://amzn.to/3QeMgjR
  Mark Richards & Neal Ford • Fundamentals of Software Architecture • https://amzn.to/3wMBhoI
  Ford, Parsons & Kua • Building Evolutionary Architectures • https://amzn.to/3l0IOh2
  Neal Ford • Functional Thinking • https://amzn.to/3l6ND8M
  Michael Feathers • Working Effectively with Legacy Code • https://amzn.to/3ZFQoMU
  Christian Clausen • Five Lines of Code • https://amzn.to/3s2zjyg
key takeaways:
  - evolutionary is related to genetic algorithms.
  - the key to evolutionary are fitness functions.
rate: 7
attention: 6
################################################################################
title: Design 101 for Programmers
author: James White
conference: YOW! 2016
url: https://www.youtube.com/watch?v=xVUV6L2IxvI&t=563s
references:
  Kevlin Henney • 97 Things Every Programmer Should Know • https://amzn.to/2Yahf9U
  Henney & Monson-Haefel • 97 Things Every Software Architect Should Know • https://amzn.to/3pZuHsQ
  Matthew Skelton & Manuel Pais • Team Topologies • http://amzn.to/3sVLyLQ
  Michael Jackson • Software Requirements and Specifications • https://amzn.to/3ql2T14
  Geoffrey West • Scale • http://amzn.to/3eKMbpc
  Donald G. Reinertsen • The Principles of Product Development Flow • https://amzn.to/3hJ2Ye2
key takeways:
rate: 7
attention: 3